services:
  # Main Relayer Services

  xrpl_ingestor:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: xrpl_ingestor
    deploy:
      mode: replicated
      replicas: 1
    env_file:
      - .env

  xrpl_distributor:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: xrpl_distributor
    env_file:
      - .env

  xrpl_ticket_creator:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: xrpl_ticket_creator
    env_file:
      - .env

  xrpl_includer:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: xrpl_includer
    deploy:
      mode: replicated
      replicas: 1
    env_file:
      - .env

  xrpl_subscriber:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: xrpl_subscriber
    env_file:
      - .env

  price_feed:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: price_feed
    env_file:
      - .env

  proof_retrier:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: proof_retrier
    env_file:
      - .env

  xrpl_heartbeat_monitor:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: xrpl_heartbeat_monitor
    env_file:
      - .env

  xrpl_queued_tx_monitor:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: xrpl_queued_tx_monitor
    env_file:
      - .env

  # Testnet / Devnet Helper Services

  xrpl_funder:
    build:
      dockerfile: Dockerfile.xrpl
      context: .
      args:
        BINARY_NAME: xrpl_funder
    env_file:
      - .env

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "127.0.0.1:6379:6379"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_PLUGINS: "rabbitmq_prometheus rabbitmq_management"
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
      - "127.0.0.1:15692:15692"

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command: >
      -c max_connections=300
      -c shared_buffers=512MB

  grafana:
    image: grafana/grafana:latest
    container_name: relayer_grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: relayer_jaeger
    restart: always
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  grafana_data:
